/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ItemService } from "../item.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ItemCreateInput } from "./ItemCreateInput";
import { Item } from "./Item";
import { ItemFindManyArgs } from "./ItemFindManyArgs";
import { ItemWhereUniqueInput } from "./ItemWhereUniqueInput";
import { ItemUpdateInput } from "./ItemUpdateInput";
import { BatchFindManyArgs } from "../../batch/base/BatchFindManyArgs";
import { Batch } from "../../batch/base/Batch";
import { BatchWhereUniqueInput } from "../../batch/base/BatchWhereUniqueInput";
import { ProductionOrderFindManyArgs } from "../../productionOrder/base/ProductionOrderFindManyArgs";
import { ProductionOrder } from "../../productionOrder/base/ProductionOrder";
import { ProductionOrderWhereUniqueInput } from "../../productionOrder/base/ProductionOrderWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ItemControllerBase {
  constructor(
    protected readonly service: ItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Item })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createItem(@common.Body() data: ItemCreateInput): Promise<Item> {
    return await this.service.createItem({
      data: data,
      select: {
        batchClassActive: true,
        batchClassDescription: true,
        batchClassId: true,
        batchClassName: true,
        batchClassRevision: true,
        className: true,
        createdAt: true,
        createdBy: true,
        editedAt: true,
        editedBy: true,
        id: true,
        productionOrderId: true,
        schemaVersion: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Item] })
  @ApiNestedQuery(ItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async items(@common.Req() request: Request): Promise<Item[]> {
    const args = plainToClass(ItemFindManyArgs, request.query);
    return this.service.items({
      ...args,
      select: {
        batchClassActive: true,
        batchClassDescription: true,
        batchClassId: true,
        batchClassName: true,
        batchClassRevision: true,
        className: true,
        createdAt: true,
        createdBy: true,
        editedAt: true,
        editedBy: true,
        id: true,
        productionOrderId: true,
        schemaVersion: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Item })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async item(
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<Item | null> {
    const result = await this.service.item({
      where: params,
      select: {
        batchClassActive: true,
        batchClassDescription: true,
        batchClassId: true,
        batchClassName: true,
        batchClassRevision: true,
        className: true,
        createdAt: true,
        createdBy: true,
        editedAt: true,
        editedBy: true,
        id: true,
        productionOrderId: true,
        schemaVersion: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Item })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateItem(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() data: ItemUpdateInput
  ): Promise<Item | null> {
    try {
      return await this.service.updateItem({
        where: params,
        data: data,
        select: {
          batchClassActive: true,
          batchClassDescription: true,
          batchClassId: true,
          batchClassName: true,
          batchClassRevision: true,
          className: true,
          createdAt: true,
          createdBy: true,
          editedAt: true,
          editedBy: true,
          id: true,
          productionOrderId: true,
          schemaVersion: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Item })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteItem(
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<Item | null> {
    try {
      return await this.service.deleteItem({
        where: params,
        select: {
          batchClassActive: true,
          batchClassDescription: true,
          batchClassId: true,
          batchClassName: true,
          batchClassRevision: true,
          className: true,
          createdAt: true,
          createdBy: true,
          editedAt: true,
          editedBy: true,
          id: true,
          productionOrderId: true,
          schemaVersion: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/batches")
  @ApiNestedQuery(BatchFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Batch",
    action: "read",
    possession: "any",
  })
  async findBatches(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<Batch[]> {
    const query = plainToClass(BatchFindManyArgs, request.query);
    const results = await this.service.findBatches(params.id, {
      ...query,
      select: {
        asset: {
          select: {
            id: true,
          },
        },

        batchActualQty: true,
        batchClass: true,
        batchClassId: true,
        batchClassName: true,
        batchId: true,
        batchPlannedQty: true,
        batchUnits: true,
        id: true,

        item: {
          select: {
            id: true,
          },
        },

        productionOrder: {
          select: {
            id: true,
          },
        },

        route: {
          select: {
            id: true,
          },
        },

        status: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/batches")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectBatches(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: BatchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      batches: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/batches")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateBatches(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: BatchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      batches: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/batches")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectBatches(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: BatchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      batches: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productionOrders")
  @ApiNestedQuery(ProductionOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "read",
    possession: "any",
  })
  async findProductionOrders(
    @common.Req() request: Request,
    @common.Param() params: ItemWhereUniqueInput
  ): Promise<ProductionOrder[]> {
    const query = plainToClass(ProductionOrderFindManyArgs, request.query);
    const results = await this.service.findProductionOrders(params.id, {
      ...query,
      select: {
        className: true,
        createdAt: true,
        createdBy: true,
        editedAt: true,
        editedBy: true,
        endDate: true,
        firmed: true,
        id: true,
        released: true,

        route: {
          select: {
            id: true,
          },
        },

        schemaVersion: true,
        startDate: true,
        state: true,

        wipItem: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productionOrders")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async connectProductionOrders(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ProductionOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionOrders: {
        connect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productionOrders")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async updateProductionOrders(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ProductionOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionOrders: {
        set: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productionOrders")
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "update",
    possession: "any",
  })
  async disconnectProductionOrders(
    @common.Param() params: ItemWhereUniqueInput,
    @common.Body() body: ProductionOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionOrders: {
        disconnect: body,
      },
    };
    await this.service.updateItem({
      where: params,
      data,
      select: { id: true },
    });
  }
}
