/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Batch, // @ts-ignore
  Asset, // @ts-ignore
  Item, // @ts-ignore
  ProductionOrder, // @ts-ignore
  Route,
} from "@prisma/client";

export class BatchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.BatchCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchCountArgs>
  ): Promise<number> {
    return this.prisma.batch.count(args);
  }

  async batches<T extends Prisma.BatchFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchFindManyArgs>
  ): Promise<Batch[]> {
    return this.prisma.batch.findMany(args);
  }
  async batch<T extends Prisma.BatchFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchFindUniqueArgs>
  ): Promise<Batch | null> {
    return this.prisma.batch.findUnique(args);
  }
  async createBatch<T extends Prisma.BatchCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchCreateArgs>
  ): Promise<Batch> {
    return this.prisma.batch.create<T>(args);
  }
  async updateBatch<T extends Prisma.BatchUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchUpdateArgs>
  ): Promise<Batch> {
    return this.prisma.batch.update<T>(args);
  }
  async deleteBatch<T extends Prisma.BatchDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BatchDeleteArgs>
  ): Promise<Batch> {
    return this.prisma.batch.delete(args);
  }

  async getAsset(parentId: string): Promise<Asset | null> {
    return this.prisma.batch
      .findUnique({
        where: { id: parentId },
      })
      .asset();
  }

  async getItem(parentId: string): Promise<Item | null> {
    return this.prisma.batch
      .findUnique({
        where: { id: parentId },
      })
      .item();
  }

  async getProductionOrder(parentId: string): Promise<ProductionOrder | null> {
    return this.prisma.batch
      .findUnique({
        where: { id: parentId },
      })
      .productionOrder();
  }

  async getRoute(parentId: string): Promise<Route | null> {
    return this.prisma.batch
      .findUnique({
        where: { id: parentId },
      })
      .route();
  }
}
