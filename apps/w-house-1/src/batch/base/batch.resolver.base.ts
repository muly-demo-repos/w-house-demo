/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Batch } from "./Batch";
import { BatchCountArgs } from "./BatchCountArgs";
import { BatchFindManyArgs } from "./BatchFindManyArgs";
import { BatchFindUniqueArgs } from "./BatchFindUniqueArgs";
import { CreateBatchArgs } from "./CreateBatchArgs";
import { UpdateBatchArgs } from "./UpdateBatchArgs";
import { DeleteBatchArgs } from "./DeleteBatchArgs";
import { Asset } from "../../asset/base/Asset";
import { Item } from "../../item/base/Item";
import { ProductionOrder } from "../../productionOrder/base/ProductionOrder";
import { Route } from "../../route/base/Route";
import { BatchService } from "../batch.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Batch)
export class BatchResolverBase {
  constructor(
    protected readonly service: BatchService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Batch",
    action: "read",
    possession: "any",
  })
  async _batchesMeta(
    @graphql.Args() args: BatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Batch])
  @nestAccessControl.UseRoles({
    resource: "Batch",
    action: "read",
    possession: "any",
  })
  async batches(@graphql.Args() args: BatchFindManyArgs): Promise<Batch[]> {
    return this.service.batches(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Batch, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Batch",
    action: "read",
    possession: "own",
  })
  async batch(
    @graphql.Args() args: BatchFindUniqueArgs
  ): Promise<Batch | null> {
    const result = await this.service.batch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Batch)
  @nestAccessControl.UseRoles({
    resource: "Batch",
    action: "create",
    possession: "any",
  })
  async createBatch(@graphql.Args() args: CreateBatchArgs): Promise<Batch> {
    return await this.service.createBatch({
      ...args,
      data: {
        ...args.data,

        asset: {
          connect: args.data.asset,
        },

        item: {
          connect: args.data.item,
        },

        productionOrder: {
          connect: args.data.productionOrder,
        },

        route: {
          connect: args.data.route,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Batch)
  @nestAccessControl.UseRoles({
    resource: "Batch",
    action: "update",
    possession: "any",
  })
  async updateBatch(
    @graphql.Args() args: UpdateBatchArgs
  ): Promise<Batch | null> {
    try {
      return await this.service.updateBatch({
        ...args,
        data: {
          ...args.data,

          asset: {
            connect: args.data.asset,
          },

          item: {
            connect: args.data.item,
          },

          productionOrder: {
            connect: args.data.productionOrder,
          },

          route: {
            connect: args.data.route,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Batch)
  @nestAccessControl.UseRoles({
    resource: "Batch",
    action: "delete",
    possession: "any",
  })
  async deleteBatch(
    @graphql.Args() args: DeleteBatchArgs
  ): Promise<Batch | null> {
    try {
      return await this.service.deleteBatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Asset, {
    nullable: true,
    name: "asset",
  })
  @nestAccessControl.UseRoles({
    resource: "Asset",
    action: "read",
    possession: "any",
  })
  async getAsset(@graphql.Parent() parent: Batch): Promise<Asset | null> {
    const result = await this.service.getAsset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Item, {
    nullable: true,
    name: "item",
  })
  @nestAccessControl.UseRoles({
    resource: "Item",
    action: "read",
    possession: "any",
  })
  async getItem(@graphql.Parent() parent: Batch): Promise<Item | null> {
    const result = await this.service.getItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductionOrder, {
    nullable: true,
    name: "productionOrder",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "read",
    possession: "any",
  })
  async getProductionOrder(
    @graphql.Parent() parent: Batch
  ): Promise<ProductionOrder | null> {
    const result = await this.service.getProductionOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Route, {
    nullable: true,
    name: "route",
  })
  @nestAccessControl.UseRoles({
    resource: "Route",
    action: "read",
    possession: "any",
  })
  async getRoute(@graphql.Parent() parent: Batch): Promise<Route | null> {
    const result = await this.service.getRoute(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
