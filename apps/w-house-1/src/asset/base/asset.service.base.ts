/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Asset, // @ts-ignore
  Batch,
} from "@prisma/client";

export class AssetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AssetCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssetCountArgs>
  ): Promise<number> {
    return this.prisma.asset.count(args);
  }

  async assets<T extends Prisma.AssetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssetFindManyArgs>
  ): Promise<Asset[]> {
    return this.prisma.asset.findMany(args);
  }
  async asset<T extends Prisma.AssetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssetFindUniqueArgs>
  ): Promise<Asset | null> {
    return this.prisma.asset.findUnique(args);
  }
  async createAsset<T extends Prisma.AssetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssetCreateArgs>
  ): Promise<Asset> {
    return this.prisma.asset.create<T>(args);
  }
  async updateAsset<T extends Prisma.AssetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssetUpdateArgs>
  ): Promise<Asset> {
    return this.prisma.asset.update<T>(args);
  }
  async deleteAsset<T extends Prisma.AssetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssetDeleteArgs>
  ): Promise<Asset> {
    return this.prisma.asset.delete(args);
  }

  async findBatches(
    parentId: string,
    args: Prisma.BatchFindManyArgs
  ): Promise<Batch[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .batches(args);
  }

  async findChildren(
    parentId: string,
    args: Prisma.AssetFindManyArgs
  ): Promise<Asset[]> {
    return this.prisma.asset
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .children(args);
  }

  async getParent(parentId: string): Promise<Asset | null> {
    return this.prisma.asset
      .findUnique({
        where: { id: parentId },
      })
      .parent();
  }
}
