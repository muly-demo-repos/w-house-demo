/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RouteRecipe, // @ts-ignore
  ProductionOrder,
} from "@prisma/client";

export class RouteRecipeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.RouteRecipeCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.RouteRecipeCountArgs>
  ): Promise<number> {
    return this.prisma.routeRecipe.count(args);
  }

  async routeRecipes<T extends Prisma.RouteRecipeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RouteRecipeFindManyArgs>
  ): Promise<RouteRecipe[]> {
    return this.prisma.routeRecipe.findMany(args);
  }
  async routeRecipe<T extends Prisma.RouteRecipeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RouteRecipeFindUniqueArgs>
  ): Promise<RouteRecipe | null> {
    return this.prisma.routeRecipe.findUnique(args);
  }
  async createRouteRecipe<T extends Prisma.RouteRecipeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RouteRecipeCreateArgs>
  ): Promise<RouteRecipe> {
    return this.prisma.routeRecipe.create<T>(args);
  }
  async updateRouteRecipe<T extends Prisma.RouteRecipeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RouteRecipeUpdateArgs>
  ): Promise<RouteRecipe> {
    return this.prisma.routeRecipe.update<T>(args);
  }
  async deleteRouteRecipe<T extends Prisma.RouteRecipeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RouteRecipeDeleteArgs>
  ): Promise<RouteRecipe> {
    return this.prisma.routeRecipe.delete(args);
  }

  async getProductionOrder(parentId: string): Promise<ProductionOrder | null> {
    return this.prisma.routeRecipe
      .findUnique({
        where: { id: parentId },
      })
      .productionOrder();
  }
}
