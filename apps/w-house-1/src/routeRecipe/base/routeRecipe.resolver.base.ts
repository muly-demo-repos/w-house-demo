/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RouteRecipe } from "./RouteRecipe";
import { RouteRecipeCountArgs } from "./RouteRecipeCountArgs";
import { RouteRecipeFindManyArgs } from "./RouteRecipeFindManyArgs";
import { RouteRecipeFindUniqueArgs } from "./RouteRecipeFindUniqueArgs";
import { CreateRouteRecipeArgs } from "./CreateRouteRecipeArgs";
import { UpdateRouteRecipeArgs } from "./UpdateRouteRecipeArgs";
import { DeleteRouteRecipeArgs } from "./DeleteRouteRecipeArgs";
import { ProductionOrder } from "../../productionOrder/base/ProductionOrder";
import { RouteRecipeService } from "../routeRecipe.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RouteRecipe)
export class RouteRecipeResolverBase {
  constructor(
    protected readonly service: RouteRecipeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RouteRecipe",
    action: "read",
    possession: "any",
  })
  async _routeRecipesMeta(
    @graphql.Args() args: RouteRecipeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RouteRecipe])
  @nestAccessControl.UseRoles({
    resource: "RouteRecipe",
    action: "read",
    possession: "any",
  })
  async routeRecipes(
    @graphql.Args() args: RouteRecipeFindManyArgs
  ): Promise<RouteRecipe[]> {
    return this.service.routeRecipes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RouteRecipe, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RouteRecipe",
    action: "read",
    possession: "own",
  })
  async routeRecipe(
    @graphql.Args() args: RouteRecipeFindUniqueArgs
  ): Promise<RouteRecipe | null> {
    const result = await this.service.routeRecipe(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RouteRecipe)
  @nestAccessControl.UseRoles({
    resource: "RouteRecipe",
    action: "create",
    possession: "any",
  })
  async createRouteRecipe(
    @graphql.Args() args: CreateRouteRecipeArgs
  ): Promise<RouteRecipe> {
    return await this.service.createRouteRecipe({
      ...args,
      data: {
        ...args.data,

        productionOrder: args.data.productionOrder
          ? {
              connect: args.data.productionOrder,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RouteRecipe)
  @nestAccessControl.UseRoles({
    resource: "RouteRecipe",
    action: "update",
    possession: "any",
  })
  async updateRouteRecipe(
    @graphql.Args() args: UpdateRouteRecipeArgs
  ): Promise<RouteRecipe | null> {
    try {
      return await this.service.updateRouteRecipe({
        ...args,
        data: {
          ...args.data,

          productionOrder: args.data.productionOrder
            ? {
                connect: args.data.productionOrder,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RouteRecipe)
  @nestAccessControl.UseRoles({
    resource: "RouteRecipe",
    action: "delete",
    possession: "any",
  })
  async deleteRouteRecipe(
    @graphql.Args() args: DeleteRouteRecipeArgs
  ): Promise<RouteRecipe | null> {
    try {
      return await this.service.deleteRouteRecipe(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductionOrder, {
    nullable: true,
    name: "productionOrder",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "read",
    possession: "any",
  })
  async getProductionOrder(
    @graphql.Parent() parent: RouteRecipe
  ): Promise<ProductionOrder | null> {
    const result = await this.service.getProductionOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
