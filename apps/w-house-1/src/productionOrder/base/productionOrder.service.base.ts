/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProductionOrder, // @ts-ignore
  Batch, // @ts-ignore
  RouteRecipe, // @ts-ignore
  Route, // @ts-ignore
  Item,
} from "@prisma/client";

export class ProductionOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ProductionOrderCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderCountArgs>
  ): Promise<number> {
    return this.prisma.productionOrder.count(args);
  }

  async productionOrders<T extends Prisma.ProductionOrderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderFindManyArgs>
  ): Promise<ProductionOrder[]> {
    return this.prisma.productionOrder.findMany(args);
  }
  async productionOrder<T extends Prisma.ProductionOrderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderFindUniqueArgs>
  ): Promise<ProductionOrder | null> {
    return this.prisma.productionOrder.findUnique(args);
  }
  async createProductionOrder<T extends Prisma.ProductionOrderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderCreateArgs>
  ): Promise<ProductionOrder> {
    return this.prisma.productionOrder.create<T>(args);
  }
  async updateProductionOrder<T extends Prisma.ProductionOrderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderUpdateArgs>
  ): Promise<ProductionOrder> {
    return this.prisma.productionOrder.update<T>(args);
  }
  async deleteProductionOrder<T extends Prisma.ProductionOrderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProductionOrderDeleteArgs>
  ): Promise<ProductionOrder> {
    return this.prisma.productionOrder.delete(args);
  }

  async findBatches(
    parentId: string,
    args: Prisma.BatchFindManyArgs
  ): Promise<Batch[]> {
    return this.prisma.productionOrder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .batches(args);
  }

  async findRouteRecipes(
    parentId: string,
    args: Prisma.RouteRecipeFindManyArgs
  ): Promise<RouteRecipe[]> {
    return this.prisma.productionOrder
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .routeRecipes(args);
  }

  async getRoute(parentId: string): Promise<Route | null> {
    return this.prisma.productionOrder
      .findUnique({
        where: { id: parentId },
      })
      .route();
  }

  async getWipItem(parentId: string): Promise<Item | null> {
    return this.prisma.productionOrder
      .findUnique({
        where: { id: parentId },
      })
      .wipItem();
  }
}
